Different methods to create multidimensional arrays in C++:

C++ programming language follows the row major order.
Program for fixed sized arrays:
#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
using namespace std;

int main()
{
	int arr[3][2] = {{10, 20},
					 {30, 40},
					 {50, 60}};

	for(int i = 0; i < 3; i++)
	{
		for(int j = 0; j < 2; j++)
		{
			cout << arr[i][j] << " ";
		}
	}


	return 0;
}

Program for variable sized arrays:
#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;


int main()
{	
	int m = 3, n = 2;
	int arr[m][n];


	for(int i = 0; i < m; i++)
	{
		for(int j = 0; j < n; j++)
		{
			arr[i][j] = i + j;
		}
	}

	for(int i = 0; i < m; i++)
	{
		for(int j = 0; j < n; j++)
		{
			cout << arr[i][j] << " ";
		}
	}


	return 0;
}

Program for mattrix using double pointer:
#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;


int main()
{	
	int m = 3, n = 2;
	int **arr;

	arr = new int* [m];

	for(int i = 0; i < m; i++)
		arr[i] = new int[n];

	for(int i = 0; i < m; i++)
	{
		for(int j = 0; j < n; j++)
		{
			arr[i][j] = 10;	

			cout << arr[i][j] << " ";
		}
	}


	return 0;
}

Useful when we want jagged matrix with different row sizes.
program for matrix using array pointers:

#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;


int main()
{	
	int m = 3, n = 2;

	int *arr[m];

	for(int i = 0; i < m; i++)
		arr[i] = new int[n];

	for(int i = 0; i < 3; i++)
	{
		for(int j = 0; j < 2; j++)
		{
			arr[i][j] = 10;	

			cout << arr[i][j] << " ";
		}
	}


	return 0;
}

Program for matrix using array of vectors:

#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;


int main()
{	
	int m = 3, n = 2;

	vector<int> arr[m];

	for(int i = 0; i < m; i++)
	{
		for(int j = 0; j < n; j++)
		{
			arr[i].push_back(10);
		}
	}

	for(int i = 0; i < m; i++)
	{
		for(int j = 0; j < n; j++)
		{
			cout << arr[i][j] << " ";
		}
	}


	return 0;
}

Program for matrix using vector of vectors:
#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;


int main()
{	
	int m = 3, n = 2;

	vector<vector<int>> arr;

	for(int i = 0; i < m; i++)
	{
		vector<int> v;

		for(int j = 0; j < n; j++)
		{
			v.push_back(10);
		}

		arr.push_back(v);
	}

	for(int i = 0; i < arr.size(); i++)
	{
		for(int j = 0; j < arr[i].size(); j++)
		{
			cout << arr[i][j] << " ";
		}
	}


	return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Passing 2D arrays as arguments in CPP:
First Method: 
#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;

void print(int mat[3][2])
{
	for(int i = 0; i < 3; i++)
	{
		for(int	j = 0; j < 2; j++)
			cout << mat[i][j] << " ";
	}
}

int main()
{	
	int m = 3, n = 2;

	int mat[3][2] = {{10, 20},
					 {30, 40},
					 {50, 60}};

	print(mat);

	return 0;
}
In this method we cant print for any matrix except 3X2 matrix.

Second method:
By omitting row size and giving it as a argument:
#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;

void print(int mat[][2], int m)
{
	for(int i = 0; i < m; i++)
	{
		for(int	j = 0; j < 2; j++)
			cout << mat[i][j] << " ";
	}
}

int main()
{	

	int mat[3][2] = {{10, 20},
					 {30, 40},
					 {50, 60}};

	print(mat, 3);

	return 0;
}
This method works only with any number of rows with 2 columns.

Third Method:
Giving rows and colums sizes as global arguments:
#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;

const int R = 3;
const int C = 2;

void print(int mat[R][C])
{
	for(int i = 0; i < R; i++)
	{
		for(int	j = 0; j < C; j++)
			cout << mat[i][j] << " ";
	}
}

int main()
{	

	int mat[R][C] = {{10, 20},
					 {30, 40},
					 {50, 60}};

	print(mat);

	return 0;
}

Fourth method:
C-style solution to write global purpose matrix methods: Double pointer & array of pointers. Below si the code for array of pointers.

#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;

void print(int **arr, int m, int n)
{
	for(int i = 0; i < m; i++)
	{
		for(int	j = 0; j < n; j++)
			cout << arr[i][j] << " ";
	}
}

int main()
{	
	int m = 3, n = 2;

	int *arr[m];

	for(int i = 0; i < m; i++)
	{
		arr[i] = new int[n];

		for(int j = 0; j < n; j++)
		{
			arr[i][j] = i;

			cout << arr[i][j] << " ";
		}
	}


	return 0;
}

Method 5 - Using array of vectors:

#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;

void print(vector<int> arr[], int m)
{
	for(int i = 0; i < m; i++)
	{
		for(int	j = 0; j < arr[i].size(); j++)
			cout << arr[i][j] << " ";
	}
}

int main()
{	
	int m = 3, n = 2;

	vector<int> arr[m];

	for(int i = 0; i < m; i++)
	{
		for(int j = 0; j < n; j++)
		{
			arr[i].push_back(i);
		}
	}

	print(arr, m);

	return 0;
}


Method 6 - Vetcor of Vectors:

#include <iostream>
#include <cmath>
#include <bits/stdc++.h> 
#include <climits>
#include <deque>
using namespace std;

void print(vector<vector<int>> arr)
{
	for(int i = 0; i < arr.size(); i++)
	{
		for(int	j = 0; j < arr[i].size(); j++)
			cout << arr[i][j] << " ";
	}
}

int main()
{	
	int m = 3, n = 2;

	vector<vector<int>> arr;

	for(int i = 0; i < m; i++)
	{
		vector<int> v;

		for(int j = 0; j < n; j++)
		{
			v.push_back(i);
		}

		arr.push_back(v);
	}

	print(arr);

	return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------
Matrix in snake pattern:
void printSnake(int mat[R][C])
{
	for(int i = 0; i < R; i++)
	{
		if(i % 2 == 0)
		{
			for(int j = 0; j < C; j++)
				cout << mat[i][j] << " ";
		}
		else
		{
			for(int j = C - 1; j >= 0; j--)
				cout << mat[i][j] << " ";
		}

	}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Transpose of matrix:
void transpose(int mat[n][n])
{
    for(int i = 0; i < n; i++)
		for(int j = i + 1; j < n; j++)
			swap(mat[i][j], mat[j][i]);
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Boundary tracersal of the matrix:\
void bTraversal(int mat[R][C])
{
	if(R == 1)
	{
		for(int i = 0; i < C; i++)
			cout << mat[0][i] << " ";
	}
	else if(C == 1)
	{
		for(int i = 0; i < R; i++)
			cout << mat[i][0] << " ";
	}
	else
	{
		for(int i = 0; i < C; i++)
			cout << mat[0][i] << " ";
		for(int i = 1; i < R; i++)
			cout << mat[i][C - 1] << " ";
		for(int i = C - 2; i >= 0; i--)
			cout << mat[R - 1][i] << " ";
		for(int i = R - 2; i >= 1; i--)
			cout << mat[i][0] << " ";
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Rotate matrix by 90 degrees:
First transpoe the matrix and reverse the rows of the matrix to get the result:

void transpose(int mat[n][n])
{
    for(int i = 0; i < n; i++)
		for(int j = i + 1; j < n; j++)
			swap(mat[i][j], mat[j][i]);
			
	for(int i = 0; i < n; i++)
	{
	    int low = 0, high = n - 1;
	    
	    while(low < high)
	    {
	        swap(mat[low][i], mat[high][i]);
	        
	        low++;
	        high--;
	    }
	}
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------



